(set-logic LIA)

( declare-const a Int )
( declare-const a! Int )
( declare-const n Int )
( declare-const n! Int )
( declare-const x Int )
( declare-const x! Int )
( declare-const y Int )
( declare-const y! Int )
( declare-const z Int )
( declare-const z! Int )

( declare-const a_0 Int )
( declare-const n_0 Int )
( declare-const n_1 Int )
( declare-const n_2 Int )
( declare-const n_3 Int )
( declare-const x_0 Int )
( declare-const x_1 Int )
( declare-const x_2 Int )
( declare-const x_3 Int )
( declare-const y_0 Int )
( declare-const y_1 Int )
( declare-const y_2 Int )
( declare-const y_3 Int )
( declare-const z_0 Int )
( declare-const z_1 Int )
( declare-const z_2 Int )
( declare-const z_3 Int )

( define-fun inv-f( ( a Int )( n Int )( x Int )( y Int )( z Int ) ) Bool
SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
)

( define-fun pre-f ( ( a Int )( n Int )( x Int )( y Int )( z Int )( a_0 Int )( n_0 Int )( n_1 Int )( n_2 Int )( n_3 Int )( x_0 Int )( x_1 Int )( x_2 Int )( x_3 Int )( y_0 Int )( y_1 Int )( y_2 Int )( y_3 Int )( z_0 Int )( z_1 Int )( z_2 Int )( z_3 Int ) ) Bool
	( and
		( = a a_0 )
		( = n n_1 )
		( = x x_1 )
		( = y y_1 )
		( = z z_1 )
		( = n_1 0 )
		( = x_1 0 )
		( = y_1 1 )
		( = z_1 6 )
		( = n_1 0 )
		( = x_1 0 )
		( = y_1 1 )
		( = z_1 6 )
		( >= a_0 n_1 )
	)
)

( define-fun trans-f ( ( a Int )( n Int )( x Int )( y Int )( z Int )( a! Int )( n! Int )( x! Int )( y! Int )( z! Int )( a_0 Int )( n_0 Int )( n_1 Int )( n_2 Int )( n_3 Int )( x_0 Int )( x_1 Int )( x_2 Int )( x_3 Int )( y_0 Int )( y_1 Int )( y_2 Int )( y_3 Int )( z_0 Int )( z_1 Int )( z_2 Int )( z_3 Int ) ) Bool
	( or
		( and
			( = n_2 n )
			( = x_2 x )
			( = y_2 y )
			( = z_2 z )
			( = n_2 n! )
			( = x_2 x! )
			( = y_2 y! )
			( = z_2 z! )
			( = a a_0 )
			( = a! a_0 )
			( = x x! )
			( = y y! )
			( = z z! )
		)
		( and
			( = n_2 n )
			( = x_2 x )
			( = y_2 y )
			( = z_2 z )
			( <= n_2 a_0 )
			( = n_3 ( + n_2 1 ) )
			( = x_3 ( + x_2 y_2 ) )
			( = y_3 ( + y_2 z_2 ) )
			( = z_3 ( + z_2 6 ) )
			( = n_3 n! )
			( = x_3 x! )
			( = y_3 y! )
			( = z_3 z! )
			(= a a_0 )
			(= a! a_0 )
		)
	)
)

( define-fun post-f ( ( a Int )( n Int )( x Int )( y Int )( z Int )( a_0 Int )( n_0 Int )( n_1 Int )( n_2 Int )( n_3 Int )( x_0 Int )( x_1 Int )( x_2 Int )( x_3 Int )( y_0 Int )( y_1 Int )( y_2 Int )( y_3 Int )( z_0 Int )( z_1 Int )( z_2 Int )( z_3 Int ) ) Bool
	( and
		( or
			( not
				( and
					( = a a_0)
					( = n n_2)
					( = x x_2)
					( = y y_2)
					( = z z_2)
				)
			)
			( not
				( and
					( not ( <= n_2 a_0 ) )
					( = n_2 ( + a_0 1 ) )
					( = y_2 ( + ( + ( * ( * 3 n_2 ) n_2 ) ( * 3 n_2 ) ) 1 ) )
					( = x_2 ( * ( * n_2 n_2 ) n_2 ) )
					( not ( and ( and ( and ( = n_2 ( + a_0 1 ) ) ( = y_2 ( + ( + ( * ( * 3 n_2 ) n_2 ) ( * 3 n_2 ) ) 1 ) ) ) ( = x_2 ( * ( * n_2 n_2 ) n_2 ) ) ) ( = z_2 ( + ( * 6 n_2 ) 6 ) ) ) )
				)
			)
		)
		( or
			( not
				( and
					( = a a_0)
					( = n n_2)
					( = x x_2)
					( = y y_2)
					( = z z_2)
				)
			)
			( not
				( and
					( not ( <= n_2 a_0 ) )
					( = n_2 ( + a_0 1 ) )
					( = y_2 ( + ( + ( * ( * 3 n_2 ) n_2 ) ( * 3 n_2 ) ) 1 ) )
					( not ( = x_2 ( * ( * n_2 n_2 ) n_2 ) ) )
					( not ( and ( and ( and ( = n_2 ( + a_0 1 ) ) ( = y_2 ( + ( + ( * ( * 3 n_2 ) n_2 ) ( * 3 n_2 ) ) 1 ) ) ) ( = x_2 ( * ( * n_2 n_2 ) n_2 ) ) ) ( = z_2 ( + ( * 6 n_2 ) 6 ) ) ) )
				)
			)
		)
		( or
			( not
				( and
					( = a a_0)
					( = n n_2)
					( = x x_2)
					( = y y_2)
					( = z z_2)
				)
			)
			( not
				( and
					( not ( <= n_2 a_0 ) )
					( = n_2 ( + a_0 1 ) )
					( not ( = y_2 ( + ( + ( * ( * 3 n_2 ) n_2 ) ( * 3 n_2 ) ) 1 ) ) )
					( not ( and ( and ( and ( = n_2 ( + a_0 1 ) ) ( = y_2 ( + ( + ( * ( * 3 n_2 ) n_2 ) ( * 3 n_2 ) ) 1 ) ) ) ( = x_2 ( * ( * n_2 n_2 ) n_2 ) ) ) ( = z_2 ( + ( * 6 n_2 ) 6 ) ) ) )
				)
			)
		)
		( or
			( not
				( and
					( = a a_0)
					( = n n_2)
					( = x x_2)
					( = y y_2)
					( = z z_2)
				)
			)
			( not
				( and
					( not ( <= n_2 a_0 ) )
					( not ( = n_2 ( + a_0 1 ) ) )
					( not ( and ( and ( and ( = n_2 ( + a_0 1 ) ) ( = y_2 ( + ( + ( * ( * 3 n_2 ) n_2 ) ( * 3 n_2 ) ) 1 ) ) ) ( = x_2 ( * ( * n_2 n_2 ) n_2 ) ) ) ( = z_2 ( + ( * 6 n_2 ) 6 ) ) ) )
				)
			)
		)
	)
)
SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
( assert ( not
	( =>
		( pre-f a n x y z a_0 n_0 n_1 n_2 n_3 x_0 x_1 x_2 x_3 y_0 y_1 y_2 y_3 z_0 z_1 z_2 z_3  )
		( inv-f a n x y z )
	)
))

SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
( assert ( not
	( =>
		( and
			( inv-f a n x y z )
			( trans-f a n x y z a! n! x! y! z! a_0 n_0 n_1 n_2 n_3 x_0 x_1 x_2 x_3 y_0 y_1 y_2 y_3 z_0 z_1 z_2 z_3 )
		)
		( inv-f a! n! x! y! z! )
	)
))

SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
( assert ( not
	( =>
		( inv-f a n x y z  )
		( post-f a n x y z a_0 n_0 n_1 n_2 n_3 x_0 x_1 x_2 x_3 y_0 y_1 y_2 y_3 z_0 z_1 z_2 z_3 )
	)
))

